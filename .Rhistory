combined_sam<-data.frame()
for (i in file_list) {
sam_batch<-read_sam(i)
combined_sam<-combined_sam %>%
bind_rows(
sam_batch
)
}
return(combined_sam)
}
#### LOADING FLEXTAXD SQLITE DATABASE ####
#dbfile<-snakemake@input[[6]]
dbfile<-"/user_data/men/sepseq/databases/2022_10_18_kraken2_EUPATH_database/databases/NCBI_GTDB_merge.db"
sqlite.driver <- dbDriver("SQLite")
db <- dbConnect(sqlite.driver,
dbname = dbfile)
## Loading the different database components into dataframes
genomes2taxid <- dbReadTable(db, "genomes")
nodes<-dbReadTable(db, "nodes")
rank<-dbReadTable(db, "rank")
tree<-dbReadTable(db, "tree")
##Loading accession2genome file
accession2genome<- read.csv2(file = "data/accession2genome.tsv", header = F, sep = "\t") %>%
unite("accession", V2:V4, remove = TRUE, sep=":") %>%
separate(accession, into = c("accession", "drop"), sep = "\\s", extra = "merge")%>%
mutate(V1 = as.character(V1),
genome = basename(V1)) %>%
separate(genome, into = c("genome", "drop2"), sep = ".fna") %>%
separate(genome, into = c("genome", "drop3"), sep = "_genomic") %>%
separate(genome, into = c("genome", "drop3"), sep = "_ASM") %>%
separate(genome, into = c("genome", "drop3"), sep = "_Viral") %>%
separate(genome, into = c("genome", "drop3"), sep = "_Genome") %>%
separate(genome, into = c("genome", "drop3"), sep = "_GRCh38") %>%
select(accession, genome)
accession2genome["genome"][accession2genome["genome"] == "UniVec_core"] <- "UniVec_core.fna.gz"
accession2genome2taxid<-accession2genome %>%
left_join(genomes2taxid, by = "genome") %>%
left_join(nodes, by = "id")
#### Loading in Sam files ####
#sam_folder = input[[5]]
sam_folder<-"data/mapped_reads/reads_90/"
sam_list<-paste(sam_folder, list.files(sam_folder, pattern = ".sam"), sep = "")
sam_files<-combine_sam_files(sam_list) %>%
left_join(accession2genome2taxid, by = "accession")
accession2length="data/accession2length.tsv"
contig_length<-read.csv2(accession2length, header = F, sep="\t")
colnames(contig_length)<- c("accession", "contig_length")
genome2krakentaxid<-sam_files %>%
filter(flag == 0 | flag == 16) %>% #take only the primary mapped read
distinct(genome, kraken_genus_taxid)
genomes<-unique(genome2krakentaxid$genome)
contig_length_subset <- contig_length %>%
left_join(accession2genome2taxid, by = "accession") %>%
filter(genome %in% genomes) %>%
left_join(genome2krakentaxid, by = "genome") %>%
rename(endpos = contig_length) %>%
group_by(genome, kraken_genus_taxid) %>%
mutate(end_pos = cumsum(endpos+1),
start_pos = end_pos - endpos)
windowsize = 5000
sam_files_grouped <- sam_files %>%
distinct(read, .keep_all = T) %>%
ungroup() %>%
left_join(
contig_length_subset %>% select(kraken_genus_taxid, genome, accession, start_pos, end_pos), by = c("genome", "accession", "kraken_genus_taxid")
) %>%
distinct(accession, read, kraken_genus_taxid, .keep_all = T) %>%
mutate(start_genome = start_position + start_pos) %>%
mutate(window = start_genome %/% windowsize + 1) %>%
group_by(genome, window) %>%
summarise(reads = n(),
kraken_genus_taxid = kraken_genus_taxid,
genome = genome) %>%
distinct(genome, window, .keep_all = T)
genome2n_window<-contig_length_subset %>%
ungroup() %>%
group_by(genome) %>%
summarise(genome = genome,
size = max(end_pos),
kraken_genus_taxid = kraken_genus_taxid) %>%
distinct(genome, size, .keep_all = T) %>%
mutate(n_windows = size %/% windowsize + 1) %>%
expand(genome, window = 1:n_windows) %>%
mutate(reads = 0) %>%
left_join(
contig_length_subset %>% select(genome, kraken_genus_taxid) %>% distinct(genome, .keep_all = T), by = c("genome")
)
genome_windows<-sam_files_grouped %>%
bind_rows(
genome2n_window
) %>%
arrange(genome, window) %>%
distinct(genome, window, .keep_all = T) %>%
group_by(genome, kraken_genus_taxid)
genome_windows_sum<-sam_files_grouped %>%
bind_rows(
genome2n_window
) %>%
arrange(genome, window) %>%
distinct(genome, window, .keep_all = T) %>%
group_by(genome, kraken_genus_taxid) %>%
summarise(genome = unique(genome),
kraken_genus_taxid = unique(kraken_genus_taxid),
reads_tot = sum(reads),
Indicator = if (max(window)<=65) {
if (max(reads)/sum(reads)<0.08) {"TP"} else {"FP"}
} else #Genomes above 65*windowsize
if (sum(reads)<10) {if (max(reads) > 1) {"FP"} else {"TP"}
} else if (sum(reads)<20) {if (max(reads) > 2) {"FP"} else {"TP"}
} else if (sum(reads)<40) {if (max(reads) > 3) {"FP"} else {"TP"}
} else if (sum(reads)<80) {if (max(reads) > 4) {"FP"} else {"TP"}
} else if (sum(reads)<120) {if (max(reads) > 5) {"FP"} else {"TP"}
} else if (sum(reads)<160) {if (max(reads) > 6) {"FP"} else {"TP"}
} else if (sum(reads)<200) {if (max(reads) > 7) {"FP"} else {"TP"}
} else if (sum(reads)<240) {if (max(reads) > 8) {"FP"} else {"TP"}
} else if (sum(reads)<280) {if (max(reads) > 9) {"FP"} else {"TP"}
} else if (sum(reads)<320) {if (max(reads) > 10) {"FP"} else {"TP"}
} else if (max(reads)/sum(reads)<0.08) {"TP"} else {"FP"}) %>%
group_by(kraken_genus_taxid) %>%
filter(reads_tot == max(reads_tot))
kraken_report_indicator <- kraken_report %>%
mutate(name = as.character(name)) %>%
mutate_if(is.character, trimws) %>%
filter(taxRank == "G") %>%
filter(name != "Homo") %>%
filter(cladeReads>3) %>%
mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)) %>%
left_join(genome_windows_sum, by = "kraken_genus_taxid") %>%
filter(!is.na(Indicator)) %>%
mutate(tick_color = case_when((Indicator == "TP" ~"darkgreen"),
(Indicator == "FP"~"red"),
(Indicator == "Small genome"~"yellow3")),
tick_name = glue("<i style='color:{tick_color}'>{name}</i>"))
krakenrefineplot<-ggplot(kraken_report_indicator, aes("",tick_name, fill = cladeReads)) +
geom_tile() +
theme_bw() +
geom_text(aes(label = cladeReads), size = 3) +
theme(axis.text.y = element_markdown(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
scale_fill_gradientn(colours = brewer.pal(8, "YlOrRd"),
values=rescale(c(0, 5, 250, 1000, 2500, 5000, 10000, 20000))) +
labs(x="", y = "Genus", fill = "Reads", title = "Grouped by KrakenRefine") +
scale_color_manual(name = "KrakenRefine")
kraken_report_plot <- kraken_report %>%
mutate(name = as.character(name)) %>%
mutate_if(is.character, trimws) %>%
filter(taxRank == "G") %>%
filter(name != "Homo") %>%
filter(cladeReads>3) %>%
mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)) %>%
mutate(tick_color = "grey",
tick_name = glue("<i style='color:{tick_color}'>{name}</i>"))
krakennotrefineplot<-ggplot(kraken_report_plot, aes("",tick_name, fill = cladeReads)) +
geom_tile() +
theme_bw() +
geom_text(aes(label = cladeReads), size = 3) +
theme(axis.text.y = element_markdown(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
scale_fill_gradientn(colours = brewer.pal(8, "YlOrRd"),
values=rescale(c(0, 5, 250, 1000, 2500, 5000, 10000, 20000))) +
labs(x="", y = "Genus", fill = "Reads", title = "Original classification",
tick_color = "Legend") +
scale_color_manual(name = "KrakenRefine")
sam_files<-combine_sam_files(sam_list)
#### Loading in Sam files ####
#sam_folder = input[[5]]
sam_folder<-"data/mapped_reads/reads_90/"
sam_list<-paste(sam_folder, list.files(sam_folder, pattern = ".sam"), sep = "")
sam_files<-combine_sam_files(sam_list) %>%
left_join(accession2genome2taxid, by = "accession")
a<-read_sam(sam_list[1])
a<-read_sam(sam_list[2])
a<-read_sam(sam_list[3])
a<-read_sam(sam_list[4])
a<-read_sam(sam_list[5])
a<-read_sam(sam_list[6])
sam_files<-combine_sam_files(sam_list)
sam_files<-combine_sam_files(sam_list)
#### Loading in Sam files ####
#sam_folder = input[[5]]
sam_folder<-"data/mapped_reads/reads_90/"
sam_list<-paste(sam_folder, list.files(sam_folder, pattern = ".sam"), sep = "")
sam_files<-combine_sam_files(sam_list) %>%
left_join(accession2genome2taxid, by = "accession")
genome2krakentaxid<-sam_files %>%
filter(flag == 0 | flag == 16) %>% #take only the primary mapped read
distinct(genome, kraken_genus_taxid)
genomes<-unique(genome2krakentaxid$genome)
contig_length_subset <- contig_length %>%
left_join(accession2genome2taxid, by = "accession") %>%
filter(genome %in% genomes) %>%
left_join(genome2krakentaxid, by = "genome") %>%
rename(endpos = contig_length) %>%
group_by(genome, kraken_genus_taxid) %>%
mutate(end_pos = cumsum(endpos+1),
start_pos = end_pos - endpos)
windowsize = 5000
sam_files_grouped <- sam_files %>%
distinct(read, .keep_all = T) %>%
ungroup() %>%
left_join(
contig_length_subset %>% select(kraken_genus_taxid, genome, accession, start_pos, end_pos), by = c("genome", "accession", "kraken_genus_taxid")
) %>%
distinct(accession, read, kraken_genus_taxid, .keep_all = T) %>%
mutate(start_genome = start_position + start_pos) %>%
mutate(window = start_genome %/% windowsize + 1) %>%
group_by(genome, window) %>%
summarise(reads = n(),
kraken_genus_taxid = kraken_genus_taxid,
genome = genome) %>%
distinct(genome, window, .keep_all = T)
genome2n_window<-contig_length_subset %>%
ungroup() %>%
group_by(genome) %>%
summarise(genome = genome,
size = max(end_pos),
kraken_genus_taxid = kraken_genus_taxid) %>%
distinct(genome, size, .keep_all = T) %>%
mutate(n_windows = size %/% windowsize + 1) %>%
expand(genome, window = 1:n_windows) %>%
mutate(reads = 0) %>%
left_join(
contig_length_subset %>% select(genome, kraken_genus_taxid) %>% distinct(genome, .keep_all = T), by = c("genome")
)
genome_windows<-sam_files_grouped %>%
bind_rows(
genome2n_window
) %>%
arrange(genome, window) %>%
distinct(genome, window, .keep_all = T) %>%
group_by(genome, kraken_genus_taxid)
genome_windows_sum<-sam_files_grouped %>%
bind_rows(
genome2n_window
) %>%
arrange(genome, window) %>%
distinct(genome, window, .keep_all = T) %>%
group_by(genome, kraken_genus_taxid) %>%
summarise(genome = unique(genome),
kraken_genus_taxid = unique(kraken_genus_taxid),
reads_tot = sum(reads),
Indicator = if (max(window)<=65) {
if (max(reads)/sum(reads)<0.08) {"TP"} else {"FP"}
} else #Genomes above 65*windowsize
if (sum(reads)<10) {if (max(reads) > 1) {"FP"} else {"TP"}
} else if (sum(reads)<20) {if (max(reads) > 2) {"FP"} else {"TP"}
} else if (sum(reads)<40) {if (max(reads) > 3) {"FP"} else {"TP"}
} else if (sum(reads)<80) {if (max(reads) > 4) {"FP"} else {"TP"}
} else if (sum(reads)<120) {if (max(reads) > 5) {"FP"} else {"TP"}
} else if (sum(reads)<160) {if (max(reads) > 6) {"FP"} else {"TP"}
} else if (sum(reads)<200) {if (max(reads) > 7) {"FP"} else {"TP"}
} else if (sum(reads)<240) {if (max(reads) > 8) {"FP"} else {"TP"}
} else if (sum(reads)<280) {if (max(reads) > 9) {"FP"} else {"TP"}
} else if (sum(reads)<320) {if (max(reads) > 10) {"FP"} else {"TP"}
} else if (max(reads)/sum(reads)<0.08) {"TP"} else {"FP"}) %>%
group_by(kraken_genus_taxid) %>%
filter(reads_tot == max(reads_tot))
kraken_report_indicator <- kraken_report %>%
mutate(name = as.character(name)) %>%
mutate_if(is.character, trimws) %>%
filter(taxRank == "G") %>%
filter(name != "Homo") %>%
filter(cladeReads>3) %>%
mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)) %>%
left_join(genome_windows_sum, by = "kraken_genus_taxid") %>%
filter(!is.na(Indicator)) %>%
mutate(tick_color = case_when((Indicator == "TP" ~"darkgreen"),
(Indicator == "FP"~"red"),
(Indicator == "Small genome"~"yellow3")),
tick_name = glue("<i style='color:{tick_color}'>{name}</i>"))
krakenrefineplot<-ggplot(kraken_report_indicator, aes("",tick_name, fill = cladeReads)) +
geom_tile() +
theme_bw() +
geom_text(aes(label = cladeReads), size = 3) +
theme(axis.text.y = element_markdown(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
scale_fill_gradientn(colours = brewer.pal(8, "YlOrRd"),
values=rescale(c(0, 5, 250, 1000, 2500, 5000, 10000, 20000))) +
labs(x="", y = "Genus", fill = "Reads", title = "Grouped by KrakenRefine") +
scale_color_manual(name = "KrakenRefine")
kraken_report_plot <- kraken_report %>%
mutate(name = as.character(name)) %>%
mutate_if(is.character, trimws) %>%
filter(taxRank == "G") %>%
filter(name != "Homo") %>%
filter(cladeReads>3) %>%
mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)) %>%
mutate(tick_color = "grey",
tick_name = glue("<i style='color:{tick_color}'>{name}</i>"))
krakennotrefineplot<-ggplot(kraken_report_plot, aes("",tick_name, fill = cladeReads)) +
geom_tile() +
theme_bw() +
geom_text(aes(label = cladeReads), size = 3) +
theme(axis.text.y = element_markdown(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
scale_fill_gradientn(colours = brewer.pal(8, "YlOrRd"),
values=rescale(c(0, 5, 250, 1000, 2500, 5000, 10000, 20000))) +
labs(x="", y = "Genus", fill = "Reads", title = "Original classification",
tick_color = "Legend") +
scale_color_manual(name = "KrakenRefine")
genome2krakentaxid<-sam_files %>%
filter(flag == 0 | flag == 16) %>% #take only the primary mapped read
distinct(genome, kraken_genus_taxid)
genomes<-unique(genome2krakentaxid$genome)
contig_length_subset <- contig_length %>%
left_join(accession2genome2taxid, by = "accession") %>%
filter(genome %in% genomes) %>%
left_join(genome2krakentaxid, by = "genome") %>%
rename(endpos = contig_length) %>%
group_by(genome, kraken_genus_taxid) %>%
mutate(end_pos = cumsum(endpos+1),
start_pos = end_pos - endpos)
windowsize = 5000
sam_files_grouped <- sam_files %>%
distinct(read, .keep_all = T) %>%
ungroup() %>%
left_join(
contig_length_subset %>% select(kraken_genus_taxid, genome, accession, start_pos, end_pos), by = c("genome", "accession", "kraken_genus_taxid")
) %>%
distinct(accession, read, kraken_genus_taxid, .keep_all = T) %>%
mutate(start_genome = start_position + start_pos) %>%
mutate(window = start_genome %/% windowsize + 1) %>%
group_by(genome, window) %>%
summarise(reads = n(),
kraken_genus_taxid = kraken_genus_taxid,
genome = genome) %>%
distinct(genome, window, .keep_all = T)
genome2n_window<-contig_length_subset %>%
ungroup() %>%
group_by(genome) %>%
summarise(genome = genome,
size = max(end_pos),
kraken_genus_taxid = kraken_genus_taxid) %>%
distinct(genome, size, .keep_all = T) %>%
mutate(n_windows = size %/% windowsize + 1) %>%
expand(genome, window = 1:n_windows) %>%
mutate(reads = 0) %>%
left_join(
contig_length_subset %>% select(genome, kraken_genus_taxid) %>% distinct(genome, .keep_all = T), by = c("genome")
)
genome_windows<-sam_files_grouped %>%
bind_rows(
genome2n_window
) %>%
arrange(genome, window) %>%
distinct(genome, window, .keep_all = T) %>%
group_by(genome, kraken_genus_taxid)
genome_windows_sum<-sam_files_grouped %>%
bind_rows(
genome2n_window
) %>%
arrange(genome, window) %>%
distinct(genome, window, .keep_all = T) %>%
group_by(genome, kraken_genus_taxid) %>%
summarise(genome = unique(genome),
kraken_genus_taxid = unique(kraken_genus_taxid),
reads_tot = sum(reads),
Indicator = if (max(window)<=65) {
if (max(reads)/sum(reads)<0.08) {"TP"} else {"FP"}
} else #Genomes above 65*windowsize
if (sum(reads)<10) {if (max(reads) > 1) {"FP"} else {"TP"}
} else if (sum(reads)<20) {if (max(reads) > 2) {"FP"} else {"TP"}
} else if (sum(reads)<40) {if (max(reads) > 3) {"FP"} else {"TP"}
} else if (sum(reads)<80) {if (max(reads) > 4) {"FP"} else {"TP"}
} else if (sum(reads)<120) {if (max(reads) > 5) {"FP"} else {"TP"}
} else if (sum(reads)<160) {if (max(reads) > 6) {"FP"} else {"TP"}
} else if (sum(reads)<200) {if (max(reads) > 7) {"FP"} else {"TP"}
} else if (sum(reads)<240) {if (max(reads) > 8) {"FP"} else {"TP"}
} else if (sum(reads)<280) {if (max(reads) > 9) {"FP"} else {"TP"}
} else if (sum(reads)<320) {if (max(reads) > 10) {"FP"} else {"TP"}
} else if (max(reads)/sum(reads)<0.08) {"TP"} else {"FP"}) %>%
group_by(kraken_genus_taxid) %>%
filter(reads_tot == max(reads_tot))
kraken_report_indicator <- kraken_report %>%
mutate(name = as.character(name)) %>%
mutate_if(is.character, trimws) %>%
filter(taxRank == "G") %>%
filter(name != "Homo") %>%
filter(cladeReads>3) %>%
mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)) %>%
left_join(genome_windows_sum, by = "kraken_genus_taxid") %>%
filter(!is.na(Indicator)) %>%
mutate(tick_color = case_when((Indicator == "TP" ~"darkgreen"),
(Indicator == "FP"~"red"),
(Indicator == "Small genome"~"yellow3")),
tick_name = glue("<i style='color:{tick_color}'>{name}</i>"))
krakenrefineplot<-ggplot(kraken_report_indicator, aes("",tick_name, fill = cladeReads)) +
geom_tile() +
theme_bw() +
geom_text(aes(label = cladeReads), size = 3) +
theme(axis.text.y = element_markdown(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
scale_fill_gradientn(colours = brewer.pal(8, "YlOrRd"),
values=rescale(c(0, 5, 250, 1000, 2500, 5000, 10000, 20000))) +
labs(x="", y = "Genus", fill = "Reads", title = "Grouped by KrakenRefine") +
scale_color_manual(name = "KrakenRefine")
kraken_report_plot <- kraken_report %>%
mutate(name = as.character(name)) %>%
mutate_if(is.character, trimws) %>%
filter(taxRank == "G") %>%
filter(name != "Homo") %>%
filter(cladeReads>3) %>%
mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)) %>%
mutate(tick_color = "grey",
tick_name = glue("<i style='color:{tick_color}'>{name}</i>"))
krakennotrefineplot<-ggplot(kraken_report_plot, aes("",tick_name, fill = cladeReads)) +
geom_tile() +
theme_bw() +
geom_text(aes(label = cladeReads), size = 3) +
theme(axis.text.y = element_markdown(),
axis.ticks.x = element_blank(),
axis.ticks.y = element_blank()) +
scale_fill_gradientn(colours = brewer.pal(8, "YlOrRd"),
values=rescale(c(0, 5, 250, 1000, 2500, 5000, 10000, 20000))) +
labs(x="", y = "Genus", fill = "Reads", title = "Original classification",
tick_color = "Legend") +
scale_color_manual(name = "KrakenRefine")
image<-plot_grid(krakennotrefineplot, krakenrefineplot, labels = "AUTO")
image
plot_df<-genome_windows %>%
mutate(genome = as.character(genome)) %>%
filter(genome %in% (genome_windows_sum %>% pull(genome))) %>%
left_join(nodes %>% rename(kraken_genus_taxid = id) %>% mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)), by = "kraken_genus_taxid")%>%
ungroup() %>%
group_by(name) %>%
do(
plots = ggplot(data = .) + aes(window, reads) +
geom_point()+ ggtitle(.$name) +
theme_bw() +
labs(x = "Genome window", y = "Read count")
)
plot_df$plots[[2]]
plot_df$plots[[7]]
pdf(paste("data/KrakenRefine_", sample, ".pdf", sep = ""), onefile = T)
for(i in seq(length(plot_df$plots))) {
do.call("grid.arrange", plot_df$plots[[i]])
}
rlang::last_error()
plot_df<-genome_windows %>%
mutate(genome = as.character(genome)) %>%
filter(genome %in% (genome_windows_sum %>% pull(genome))) %>%
left_join(nodes %>% rename(kraken_genus_taxid = id) %>% mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)), by = "kraken_genus_taxid")%>%
ungroup() %>%
group_by(name) %>%
ggplot(data = .) + aes(window, reads) +
geom_point()+ ggtitle(.$name) +
theme_bw() +
labs(x = "Genome window", y = "Read count")
plot_df<-genome_windows %>%
mutate(genome = as.character(genome)) %>%
filter(genome %in% (genome_windows_sum %>% pull(genome))) %>%
left_join(nodes %>% rename(kraken_genus_taxid = id) %>% mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)), by = "kraken_genus_taxid")%>%
ungroup() %>%
group_by(name) %>%
ggplot(aes(window, reads)) +
geom_point()+ ggtitle(.$name) +
theme_bw() +
labs(x = "Genome window", y = "Read count")
plot_df<-genome_windows %>%
mutate(genome = as.character(genome)) %>%
filter(genome %in% (genome_windows_sum %>% pull(genome))) %>%
left_join(nodes %>% rename(kraken_genus_taxid = id) %>% mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)), by = "kraken_genus_taxid")%>%
ungroup() %>%
group_by(name) %>%
ggplot(aes(window, reads)) +
geom_point()+ ggtitle(name) +
theme_bw() +
labs(x = "Genome window", y = "Read count")
plot_df<-genome_windows %>%
mutate(genome = as.character(genome)) %>%
filter(genome %in% (genome_windows_sum %>% pull(genome))) %>%
left_join(nodes %>% rename(kraken_genus_taxid = id) %>% mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)), by = "kraken_genus_taxid")%>%
ungroup() %>%
group_by(name) %>%
ggplot(aes(window, reads)) +
geom_point() +
theme_bw() +
labs(x = "Genome window", y = "Read count")
View(plot_df)
plot_df
image
plot_df<-genome_windows %>%
mutate(genome = as.character(genome)) %>%
filter(genome %in% (genome_windows_sum %>% pull(genome))) %>%
left_join(nodes %>% rename(kraken_genus_taxid = id) %>% mutate(kraken_genus_taxid = as.character(kraken_genus_taxid)), by = "kraken_genus_taxid")%>%
ungroup() %>%
group_by(name) %>%
do(
plots = ggplot(data = .) + aes(window, reads) +
geom_point()+ ggtitle(.$name) +
theme_bw() +
labs(x = "Genome window", y = "Read count")
)
plot_df$plots[[4]]
plot_df$plots[[25]]
source('/user_data/men/sepseq/clinical_studies/init_tests/kraken2_filter/code/evaluate_mappings.R', echo=TRUE)
plot_df$plots[[24]]
plot_df$plots[[22]]
plot_df$plots[[21]]
plot_df$plots[[19]]
plot_df$plots[[18]]
plot_df$plots[[17]]
plot_df$plots[[13]]
plot_df$plots[[12]]
plot_df$plots[[11]]
install.packages("gggenes")
?plot_grid
